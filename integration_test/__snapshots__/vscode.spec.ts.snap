// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`vscode > vscode 1`] = `
{
  "config": {
    "$schema": "./node_modules/oxlint/configuration_schema.json",
    "categories": {
      "correctness": "off",
    },
    "env": {
      "builtin": true,
    },
    "ignorePatterns": [
      "**/build/*/**/*.js",
      "**/dist/**/*.js",
      "**/extensions/**/*.d.ts",
      "**/extensions/**/build/**",
      "**/extensions/**/colorize-fixtures/**",
      "**/extensions/css-language-features/server/test/pathCompletionFixtures/**",
      "**/extensions/html-language-features/server/lib/jquery.d.ts",
      "**/extensions/html-language-features/server/src/test/pathCompletionFixtures/**",
      "**/extensions/ipynb/notebook-out/**",
      "**/extensions/markdown-language-features/media/**",
      "**/extensions/markdown-language-features/notebook-out/**",
      "**/extensions/markdown-math/notebook-out/**",
      "**/extensions/notebook-renderers/renderer-out/index.js",
      "**/extensions/simple-browser/media/index.js",
      "**/extensions/terminal-suggest/src/completions/upstream/**",
      "**/extensions/terminal-suggest/third_party/**",
      "**/extensions/typescript-language-features/test-workspace/**",
      "**/extensions/typescript-language-features/extension.webpack.config.js",
      "**/extensions/typescript-language-features/extension-browser.webpack.config.js",
      "**/extensions/typescript-language-features/package-manager/node-maintainer/**",
      "**/extensions/vscode-api-tests/testWorkspace/**",
      "**/extensions/vscode-api-tests/testWorkspace2/**",
      "**/fixtures/**",
      "**/node_modules/**",
      "**/out-*/**/*.js",
      "**/out-editor-*/**",
      "**/out/**/*.js",
      "**/src/**/dompurify.js",
      "**/src/**/marked.js",
      "**/src/**/semver.js",
      "**/src/typings/**/*.d.ts",
      "**/src/vs/*/**/*.d.ts",
      "**/src/vs/base/test/common/filters.perf.data.js",
      "**/src/vs/loader.js",
      "**/test/unit/assert.js",
      "**/test/automation/out/**",
      "**/typings/**",
      "!.vscode",
    ],
    "jsPlugins": [
      "eslint-plugin-local",
      "eslint-plugin-header",
    ],
    "overrides": [
      {
        "files": [
          "**/*.ts",
        ],
        "jsPlugins": [
          "@stylistic/eslint-plugin",
          "eslint-plugin-local",
        ],
        "rules": {
          "@stylistic/ts/member-delimiter-style": "warn",
          "@stylistic/ts/semi": "warn",
          "local/code-no-static-self-ref": "warn",
          "local/code-no-unused-expressions": [
            "warn",
            {
              "allowTernary": true,
            },
          ],
        },
      },
      {
        "files": [
          "**/*.test.ts",
        ],
        "jsPlugins": [
          "eslint-plugin-local",
        ],
        "rules": {
          "local/code-must-use-result": [
            "warn",
            [
              {
                "functions": [
                  "assertSnapshot",
                  "assertHeap",
                ],
                "message": "Expression must be awaited",
              },
            ],
          ],
          "local/code-no-test-async-suite": "warn",
          "local/code-no-test-only": "error",
        },
      },
      {
        "files": [
          "src/vs/**/*.test.ts",
        ],
        "jsPlugins": [
          "eslint-plugin-local",
        ],
        "rules": {
          "local/code-ensure-no-disposables-leak-in-test": [
            "warn",
            {
              "exclude": [
                "src/vs/platform/configuration/test/common/configuration.test.ts",
                "src/vs/platform/opener/test/common/opener.test.ts",
                "src/vs/platform/registry/test/common/platform.test.ts",
                "src/vs/platform/workspace/test/common/workspace.test.ts",
                "src/vs/platform/workspaces/test/electron-main/workspaces.test.ts",
                "src/vs/workbench/api/test/browser/mainThreadConfiguration.test.ts",
                "src/vs/workbench/api/test/node/extHostTunnelService.test.ts",
                "src/vs/workbench/contrib/bulkEdit/test/browser/bulkCellEdits.test.ts",
                "src/vs/workbench/contrib/chat/test/common/chatWordCounter.test.ts",
                "src/vs/workbench/contrib/extensions/test/common/extensionQuery.test.ts",
                "src/vs/workbench/contrib/notebook/test/browser/notebookExecutionService.test.ts",
                "src/vs/workbench/contrib/notebook/test/browser/notebookExecutionStateService.test.ts",
                "src/vs/workbench/contrib/tasks/test/common/problemMatcher.test.ts",
                "src/vs/workbench/contrib/tasks/test/common/taskConfiguration.test.ts",
                "src/vs/workbench/services/commands/test/common/commandService.test.ts",
                "src/vs/workbench/services/userActivity/test/browser/domActivityTracker.test.ts",
                "src/vs/workbench/test/browser/quickAccess.test.ts",
              ],
            },
          ],
        },
      },
      {
        "files": [
          "**/vscode.d.ts",
          "**/vscode.proposed.*.d.ts",
        ],
        "jsPlugins": [
          "eslint-plugin-local",
        ],
        "rules": {
          "local/vscode-dts-cancellation": "warn",
          "local/vscode-dts-create-func": "warn",
          "local/vscode-dts-event-naming": [
            "warn",
            {
              "allowed": [
                "onCancellationRequested",
                "event",
              ],
              "verbs": [
                "accept",
                "change",
                "close",
                "collapse",
                "create",
                "delete",
                "discover",
                "dispose",
                "drop",
                "edit",
                "end",
                "execute",
                "expand",
                "grant",
                "hide",
                "invalidate",
                "open",
                "override",
                "perform",
                "receive",
                "register",
                "remove",
                "rename",
                "save",
                "send",
                "start",
                "terminate",
                "trigger",
                "unregister",
                "write",
              ],
            },
          ],
          "local/vscode-dts-interface-naming": "warn",
          "local/vscode-dts-literal-or-types": "warn",
          "local/vscode-dts-provider-naming": [
            "warn",
            {
              "allowed": [
                "FileSystemProvider",
                "TreeDataProvider",
                "TestProvider",
                "CustomEditorProvider",
                "CustomReadonlyEditorProvider",
                "TerminalLinkProvider",
                "AuthenticationProvider",
                "NotebookContentProvider",
              ],
            },
          ],
          "local/vscode-dts-string-type-literals": "warn",
          "local/vscode-dts-use-export": "warn",
          "local/vscode-dts-use-thenable": "warn",
          "local/vscode-dts-vscode-in-comments": "warn",
        },
      },
      {
        "files": [
          "**/vscode.d.ts",
        ],
        "plugins": [
          "jsdoc",
        ],
        "rules": {
          "jsdoc/require-returns": "warn",
        },
      },
      {
        "files": [
          "src/**/{common,browser}/**/*.ts",
        ],
        "jsPlugins": [
          "eslint-plugin-local",
        ],
        "rules": {
          "local/code-amd-node-module": "warn",
        },
      },
      {
        "files": [
          "src/*.ts",
          "src/**/{node,electron-main,electron-utility}/**/*.ts",
        ],
        "rules": {
          "no-restricted-globals": [
            "warn",
            "name",
            "length",
            "event",
            "closed",
            "external",
            "status",
            "origin",
            "orientation",
            "context",
            "__dirname",
            "__filename",
            "require",
          ],
        },
      },
      {
        "files": [
          "src/**/{browser,electron-sandbox}/**/*.ts",
        ],
        "jsPlugins": [
          "eslint-plugin-local",
        ],
        "rules": {
          "local/code-no-global-document-listener": "warn",
          "no-restricted-globals": [
            "warn",
            "name",
            "length",
            "event",
            "closed",
            "external",
            "status",
            "origin",
            "orientation",
            "context",
            {
              "message": "Use <targetWindow>.setInterval to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "setInterval",
            },
            {
              "message": "Use <targetWindow>.clearInterval to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "clearInterval",
            },
            {
              "message": "Use <targetWindow>.requestAnimationFrame to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "requestAnimationFrame",
            },
            {
              "message": "Use <targetWindow>.cancelAnimationFrame to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "cancelAnimationFrame",
            },
            {
              "message": "Use <targetWindow>.requestIdleCallback to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "requestIdleCallback",
            },
            {
              "message": "Use <targetWindow>.cancelIdleCallback to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "cancelIdleCallback",
            },
            {
              "message": "Use <targetWindow> to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "window",
            },
            {
              "message": "Use <targetWindow>.addEventListener to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "addEventListener",
            },
            {
              "message": "Use <targetWindow>.removeEventListener to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "removeEventListener",
            },
            {
              "message": "Use <targetWindow>.getComputedStyle to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "getComputedStyle",
            },
            {
              "message": "Use <targetWindow>.focus to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "focus",
            },
            {
              "message": "Use <targetWindow>.blur to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "blur",
            },
            {
              "message": "Use <targetWindow>.close to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "close",
            },
            {
              "message": "Use <targetWindow>.dispatchEvent to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "dispatchEvent",
            },
            {
              "message": "Use <targetWindow>.getSelection to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "getSelection",
            },
            {
              "message": "Use <targetWindow>.matchMedia to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "matchMedia",
            },
            {
              "message": "Use <targetWindow>.open to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "open",
            },
            {
              "message": "Use <targetWindow>.parent to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "parent",
            },
            {
              "message": "Use <targetWindow>.postMessage to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "postMessage",
            },
            {
              "message": "Use <targetWindow>.devicePixelRatio to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "devicePixelRatio",
            },
            {
              "message": "Use <targetWindow>.frames to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "frames",
            },
            {
              "message": "Use <targetWindow>.frameElement to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "frameElement",
            },
            {
              "message": "Use <targetWindow>.innerHeight to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "innerHeight",
            },
            {
              "message": "Use <targetWindow>.innerWidth to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "innerWidth",
            },
            {
              "message": "Use <targetWindow>.outerHeight to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "outerHeight",
            },
            {
              "message": "Use <targetWindow>.outerWidth to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "outerWidth",
            },
            {
              "message": "Use <targetWindow>.opener to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "opener",
            },
            {
              "message": "Use <targetWindow>.origin to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "origin",
            },
            {
              "message": "Use <targetWindow>.screen to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "screen",
            },
            {
              "message": "Use <targetWindow>.screenLeft to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "screenLeft",
            },
            {
              "message": "Use <targetWindow>.screenTop to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "screenTop",
            },
            {
              "message": "Use <targetWindow>.screenX to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "screenX",
            },
            {
              "message": "Use <targetWindow>.screenY to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "screenY",
            },
            {
              "message": "Use <targetWindow>.scrollX to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "scrollX",
            },
            {
              "message": "Use <targetWindow>.scrollY to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "scrollY",
            },
            {
              "message": "Use <targetWindow>.top to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "top",
            },
            {
              "message": "Use <targetWindow>.visualViewport to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "visualViewport",
            },
          ],
        },
      },
      {
        "files": [
          "src/**/electron-utility/**/*.ts",
        ],
        "rules": {
          "no-restricted-imports": [
            "warn",
            {
              "paths": [
                {
                  "allowImportNames": [
                    "net",
                    "system-preferences",
                  ],
                  "message": "Only net and system-preferences are allowed to be imported from electron",
                  "name": "electron",
                },
              ],
            },
          ],
        },
      },
      {
        "files": [
          "src/**/*.ts",
        ],
        "jsPlugins": [
          "eslint-plugin-local",
        ],
        "rules": {
          "local/code-import-patterns": [
            "warn",
            {
              "allow": [],
              "when": "hasBrowser",
            },
            {
              "allow": [
                "@parcel/watcher",
                "@vscode/sqlite3",
                "@vscode/vscode-languagedetection",
                "@vscode/ripgrep",
                "@vscode/iconv-lite-umd",
                "@vscode/policy-watcher",
                "@vscode/proxy-agent",
                "@vscode/spdlog",
                "@vscode/windows-process-tree",
                "assert",
                "child_process",
                "console",
                "cookie",
                "crypto",
                "dns",
                "events",
                "fs",
                "fs/promises",
                "http",
                "https",
                "minimist",
                "node:module",
                "native-keymap",
                "native-watchdog",
                "net",
                "node-pty",
                "os",
                "path",
                "perf_hooks",
                "readline",
                "stream",
                "string_decoder",
                "tas-client-umd",
                "tls",
                "undici-types",
                "url",
                "util",
                "v8-inspect-profiler",
                "vscode-regexpp",
                "vscode-textmate",
                "worker_threads",
                "@xterm/addon-clipboard",
                "@xterm/addon-image",
                "@xterm/addon-ligatures",
                "@xterm/addon-search",
                "@xterm/addon-serialize",
                "@xterm/addon-unicode11",
                "@xterm/addon-webgl",
                "@xterm/headless",
                "@xterm/xterm",
                "yauzl",
                "yazl",
                "zlib",
              ],
              "when": "hasNode",
            },
            {
              "allow": [
                "electron",
              ],
              "when": "hasElectron",
            },
            {
              "allow": [
                "assert",
                "sinon",
                "sinon-test",
              ],
              "when": "test",
            },
            {
              "restrictions": [
                "vs/base/~",
              ],
              "target": "src/vs/base/~",
            },
            {
              "restrictions": [
                "vs/base/~",
                "vs/base/parts/*/~",
              ],
              "target": "src/vs/base/parts/*/~",
            },
            {
              "restrictions": [
                "vs/base/~",
                "vs/base/parts/*/~",
                "vs/platform/*/~",
                "tas-client-umd",
                "@microsoft/1ds-core-js",
                "@microsoft/1ds-post-js",
                "@xterm/headless",
              ],
              "target": "src/vs/platform/*/~",
            },
            {
              "restrictions": [
                "vs/base/~",
                "vs/base/parts/*/~",
                "vs/platform/*/~",
                "vs/editor/~",
                "@vscode/tree-sitter-wasm",
              ],
              "target": "src/vs/editor/~",
            },
            {
              "restrictions": [
                "vs/base/~",
                "vs/base/parts/*/~",
                "vs/platform/*/~",
                "vs/editor/~",
                "vs/editor/contrib/*/~",
              ],
              "target": "src/vs/editor/contrib/*/~",
            },
            {
              "restrictions": [
                "vs/base/~",
                "vs/base/parts/*/~",
                "vs/platform/*/~",
                "vs/editor/~",
                "vs/editor/contrib/*/~",
                "vs/editor/standalone/~",
                "@vscode/tree-sitter-wasm",
              ],
              "target": "src/vs/editor/standalone/~",
            },
            {
              "layer": "browser",
              "restrictions": [
                "vs/base/~",
                "vs/base/parts/*/~",
                "vs/platform/*/~",
                "vs/editor/~",
                "vs/editor/contrib/*/~",
              ],
              "target": "src/vs/editor/editor.all.ts",
            },
            {
              "layer": "worker",
              "restrictions": [
                "vs/base/~",
                "vs/base/parts/*/~",
                "vs/platform/*/~",
                "vs/editor/~",
              ],
              "target": "src/vs/editor/editor.worker.ts",
            },
            {
              "layer": "browser",
              "restrictions": [
                "vs/base/~",
                "vs/base/parts/*/~",
                "vs/editor/~",
                "vs/editor/contrib/*/~",
                "vs/editor/standalone/~",
                "vs/editor/*",
              ],
              "target": "src/vs/editor/{editor.api.ts,editor.main.ts}",
            },
            {
              "restrictions": [
                "vs/base/~",
                "vs/base/parts/*/~",
                "vs/platform/*/~",
                "vs/editor/~",
                "vs/editor/contrib/*/~",
                "vs/workbench/~",
                "vs/workbench/services/*/~",
                "assert",
                {
                  "pattern": "vs/workbench/contrib/*/~",
                  "when": "test",
                },
              ],
              "target": "src/vs/workbench/~",
            },
            {
              "restrictions": [
                "vscode",
                "vs/base/~",
                "vs/base/parts/*/~",
                "vs/platform/*/~",
                "vs/editor/~",
                "vs/editor/contrib/*/~",
                "vs/workbench/api/~",
                "vs/workbench/~",
                "vs/workbench/services/*/~",
                "vs/workbench/contrib/*/~",
                "vs/workbench/contrib/terminalContrib/*/~",
              ],
              "target": "src/vs/workbench/api/~",
            },
            {
              "restrictions": [
                "vs/base/~",
                "vs/base/parts/*/~",
                "vs/platform/*/~",
                "vs/editor/~",
                "vs/editor/contrib/*/~",
                "vs/workbench/~",
                "vs/workbench/services/*/~",
                {
                  "pattern": "vs/workbench/contrib/*/~",
                  "when": "test",
                },
                "tas-client-umd",
                "vscode-textmate",
                "@vscode/vscode-languagedetection",
                "@vscode/tree-sitter-wasm",
                {
                  "pattern": "@xterm/xterm",
                  "when": "hasBrowser",
                },
              ],
              "target": "src/vs/workbench/services/*/~",
            },
            {
              "restrictions": [
                "vs/base/~",
                "vs/base/parts/*/~",
                "vs/platform/*/~",
                "vs/editor/~",
                "vs/editor/contrib/*/~",
                "vs/workbench/~",
                "vs/workbench/services/*/~",
                "vs/workbench/contrib/*/~",
                "vs/workbench/contrib/terminal/terminalContribChatExports*",
                "vs/workbench/contrib/terminal/terminalContribExports*",
                "vscode-notebook-renderer",
                "@vscode/tree-sitter-wasm",
                {
                  "pattern": "@xterm/xterm",
                  "when": "hasBrowser",
                },
                {
                  "pattern": "@xterm/addon-*",
                  "when": "hasBrowser",
                },
                {
                  "pattern": "vscode-textmate",
                  "when": "hasBrowser",
                },
              ],
              "target": "src/vs/workbench/contrib/*/~",
            },
            {
              "restrictions": [
                "vs/base/~",
                "vs/base/parts/*/~",
                "vs/platform/*/~",
                "vs/editor/~",
                "vs/editor/contrib/*/~",
                "vs/workbench/~",
                "vs/workbench/services/*/~",
                "vs/workbench/contrib/*/~",
                "vs/workbench/contrib/terminalContrib/*/~",
                "vscode-notebook-renderer",
                {
                  "pattern": "@xterm/xterm",
                  "when": "hasBrowser",
                },
                {
                  "pattern": "@xterm/addon-*",
                  "when": "hasBrowser",
                },
                {
                  "pattern": "vscode-textmate",
                  "when": "hasBrowser",
                },
                "@xterm/headless",
              ],
              "target": "src/vs/workbench/contrib/terminalContrib/*/~",
            },
            {
              "restrictions": [
                "vs/base/~",
                "vs/base/parts/*/~",
                "vs/platform/*/~",
                "vs/editor/~",
                "vs/editor/contrib/*/~",
                "vs/code/~",
                {
                  "pattern": "vs/workbench/workbench.web.main.js",
                  "when": "hasBrowser",
                },
                {
                  "pattern": "vs/workbench/workbench.web.main.internal.js",
                  "when": "hasBrowser",
                },
                {
                  "pattern": "vs/workbench/~",
                  "when": "hasBrowser",
                },
                {
                  "pattern": "vs/workbench/services/*/~",
                  "when": "hasBrowser",
                },
              ],
              "target": "src/vs/code/~",
            },
            {
              "restrictions": [
                "vs/base/~",
                "vs/base/parts/*/~",
                "vs/platform/*/~",
                "vs/workbench/~",
                "vs/workbench/api/~",
                "vs/workbench/services/*/~",
                "vs/workbench/contrib/*/~",
                "vs/server/~",
              ],
              "target": "src/vs/server/~",
            },
            {
              "layer": "browser",
              "restrictions": [
                "vs/workbench/contrib/**",
              ],
              "target": "src/vs/workbench/contrib/terminal/terminal.all.ts",
            },
            {
              "layer": "browser",
              "restrictions": [
                "vs/workbench/contrib/terminalContrib/*/~",
              ],
              "target": "src/vs/workbench/contrib/terminal/terminalContribChatExports.ts",
            },
            {
              "layer": "browser",
              "restrictions": [
                "vs/platform/*/~",
                "vs/workbench/contrib/terminalContrib/*/~",
              ],
              "target": "src/vs/workbench/contrib/terminal/terminalContribExports.ts",
            },
            {
              "layer": "browser",
              "restrictions": [
                "vs/base/~",
                "vs/base/parts/*/~",
                "vs/platform/*/~",
                "vs/editor/~",
                "vs/editor/contrib/*/~",
                "vs/editor/editor.all.js",
                "vs/workbench/~",
                "vs/workbench/api/~",
                "vs/workbench/services/*/~",
                "vs/workbench/contrib/*/~",
                "vs/workbench/contrib/terminal/terminal.all.js",
              ],
              "target": "src/vs/workbench/workbench.common.main.ts",
            },
            {
              "layer": "browser",
              "restrictions": [
                "vs/base/~",
                "vs/base/parts/*/~",
                "vs/platform/*/~",
                "vs/editor/~",
                "vs/editor/contrib/*/~",
                "vs/editor/editor.all.js",
                "vs/workbench/~",
                "vs/workbench/api/~",
                "vs/workbench/services/*/~",
                "vs/workbench/contrib/*/~",
                "vs/workbench/workbench.common.main.js",
              ],
              "target": "src/vs/workbench/workbench.web.main.ts",
            },
            {
              "layer": "browser",
              "restrictions": [
                "vs/base/~",
                "vs/base/parts/*/~",
                "vs/platform/*/~",
                "vs/editor/~",
                "vs/editor/contrib/*/~",
                "vs/editor/editor.all.js",
                "vs/workbench/~",
                "vs/workbench/api/~",
                "vs/workbench/services/*/~",
                "vs/workbench/contrib/*/~",
                "vs/workbench/workbench.common.main.js",
              ],
              "target": "src/vs/workbench/workbench.web.main.internal.ts",
            },
            {
              "layer": "electron-sandbox",
              "restrictions": [
                "vs/base/*/~",
                "vs/base/parts/*/~",
                "vs/platform/*/~",
                "vs/editor/~",
                "vs/editor/contrib/*/~",
                "vs/editor/editor.all.js",
                "vs/workbench/~",
                "vs/workbench/api/~",
                "vs/workbench/services/*/~",
                "vs/workbench/contrib/*/~",
                "vs/workbench/workbench.common.main.js",
              ],
              "target": "src/vs/workbench/workbench.desktop.main.ts",
            },
            {
              "restrictions": [
                "vs/base/common/*",
              ],
              "target": "src/vs/amdX.ts",
            },
            {
              "restrictions": [],
              "target": "src/vs/{loader.d.ts,monaco.d.ts,nls.ts,nls.messages.ts}",
            },
            {
              "restrictions": [],
              "target": "src/vscode-dts/**",
            },
            {
              "restrictions": [],
              "target": "src/bootstrap-window.ts",
            },
            {
              "restrictions": [
                "vs/*",
              ],
              "target": "src/vs/nls.ts",
            },
            {
              "restrictions": [
                "vs/**/common/*",
                "vs/**/node/*",
                "vs/nls.js",
                "src/*.js",
                "*",
              ],
              "target": "src/{bootstrap-cli.ts,bootstrap-esm.ts,bootstrap-fork.ts,bootstrap-import.ts,bootstrap-meta.ts,bootstrap-node.ts,bootstrap-server.ts,cli.ts,main.ts,server-cli.ts,server-main.ts}",
            },
          ],
        },
      },
      {
        "files": [
          "test/**/*.ts",
        ],
        "jsPlugins": [
          "eslint-plugin-local",
        ],
        "rules": {
          "local/code-import-patterns": [
            "warn",
            {
              "restrictions": [
                "test/automation",
                "test/smoke/**",
                "@vscode/*",
                "@parcel/*",
                "@playwright/*",
                "*",
              ],
              "target": "test/smoke/**",
            },
            {
              "restrictions": [
                "test/automation/**",
                "@vscode/*",
                "@parcel/*",
                "playwright-core/**",
                "@playwright/*",
                "*",
              ],
              "target": "test/automation/**",
            },
            {
              "restrictions": [
                "test/integration/**",
                "@vscode/*",
                "@parcel/*",
                "@playwright/*",
                "*",
              ],
              "target": "test/integration/**",
            },
            {
              "restrictions": [
                "test/monaco/**",
                "@vscode/*",
                "@parcel/*",
                "@playwright/*",
                "*",
              ],
              "target": "test/monaco/**",
            },
          ],
        },
      },
      {
        "files": [
          "src/vs/workbench/contrib/notebook/browser/view/renderers/*.ts",
        ],
        "jsPlugins": [
          "eslint-plugin-local",
        ],
        "rules": {
          "local/code-limited-top-functions": [
            "error",
            {
              "src/vs/workbench/contrib/notebook/browser/view/renderers/webviewPreloads.ts": [
                "webviewPreloads",
                "preloadsScriptStr",
              ],
            },
          ],
          "local/code-no-runtime-import": [
            "error",
            {
              "src/vs/workbench/contrib/notebook/browser/view/renderers/webviewPreloads.ts": [
                "**/*",
              ],
            },
          ],
        },
      },
    ],
    "plugins": [],
    "rules": {
      "curly": "warn",
      "eqeqeq": "warn",
      "header/header": [
        "warn",
        "block",
        [
          "---------------------------------------------------------------------------------------------",
          " *  Copyright (c) Microsoft Corporation. All rights reserved.",
          " *  Licensed under the MIT License. See License.txt in the project root for license information.",
          " *--------------------------------------------------------------------------------------------",
        ],
      ],
      "local/code-declare-service-brand": "warn",
      "local/code-layering": [
        "warn",
        {
          "browser": [
            "common",
          ],
          "common": [],
          "electron-main": [
            "common",
            "node",
            "electron-utility",
          ],
          "electron-sandbox": [
            "common",
            "browser",
          ],
          "electron-utility": [
            "common",
            "node",
          ],
          "node": [
            "common",
          ],
        },
      ],
      "local/code-must-use-super-dispose": "warn",
      "local/code-no-dangerous-type-assertions": "warn",
      "local/code-no-native-private": "warn",
      "local/code-no-nls-in-standalone-editor": "warn",
      "local/code-no-potentially-unsafe-disposables": "warn",
      "local/code-no-standalone-editor": "warn",
      "local/code-no-unexternalized-strings": "warn",
      "local/code-parameter-properties-must-have-explicit-accessibility": "warn",
      "local/code-translation-remind": "warn",
      "no-async-promise-executor": "warn",
      "no-caller": "warn",
      "no-case-declarations": "warn",
      "no-debugger": "warn",
      "no-duplicate-case": "warn",
      "no-duplicate-imports": "warn",
      "no-eval": "warn",
      "no-new-wrappers": "warn",
      "no-restricted-globals": [
        "warn",
        "name",
        "length",
        "event",
        "closed",
        "external",
        "status",
        "origin",
        "orientation",
        "context",
      ],
      "no-sparse-arrays": "warn",
      "no-throw-literal": "warn",
      "no-unsafe-finally": "warn",
      "no-unused-labels": "warn",
      "no-var": "warn",
    },
  },
  "warnings": [
    "unsupported rule, but in development: constructor-super",
    "unsupported rule: prefer-const",
    "unsupported rule: no-buffer-constructor",
    "unsupported rule: no-extra-semi",
    "unsupported rule, but in development: no-misleading-character-class",
    "unsupported rule: jsdoc/no-types",
    "unsupported rule: @typescript-eslint/naming-convention",
    "unsupported rule: no-restricted-syntax",
    "unsupported rule: jsdoc/no-multi-asterisks",
    "unsupported rule: jsdoc/require-jsdoc",
    "unsupported rule: jsdoc/check-param-names",
    "unsupported rule: comma-dangle",
    "unsupported rule: @typescript-eslint/prefer-optional-chain",
    "unsupported rule: @typescript-eslint/prefer-readonly",
  ],
}
`;

exports[`vscode --type-aware > vscode--type-aware 1`] = `
{
  "config": {
    "$schema": "./node_modules/oxlint/configuration_schema.json",
    "categories": {
      "correctness": "off",
    },
    "env": {
      "builtin": true,
    },
    "ignorePatterns": [
      "**/build/*/**/*.js",
      "**/dist/**/*.js",
      "**/extensions/**/*.d.ts",
      "**/extensions/**/build/**",
      "**/extensions/**/colorize-fixtures/**",
      "**/extensions/css-language-features/server/test/pathCompletionFixtures/**",
      "**/extensions/html-language-features/server/lib/jquery.d.ts",
      "**/extensions/html-language-features/server/src/test/pathCompletionFixtures/**",
      "**/extensions/ipynb/notebook-out/**",
      "**/extensions/markdown-language-features/media/**",
      "**/extensions/markdown-language-features/notebook-out/**",
      "**/extensions/markdown-math/notebook-out/**",
      "**/extensions/notebook-renderers/renderer-out/index.js",
      "**/extensions/simple-browser/media/index.js",
      "**/extensions/terminal-suggest/src/completions/upstream/**",
      "**/extensions/terminal-suggest/third_party/**",
      "**/extensions/typescript-language-features/test-workspace/**",
      "**/extensions/typescript-language-features/extension.webpack.config.js",
      "**/extensions/typescript-language-features/extension-browser.webpack.config.js",
      "**/extensions/typescript-language-features/package-manager/node-maintainer/**",
      "**/extensions/vscode-api-tests/testWorkspace/**",
      "**/extensions/vscode-api-tests/testWorkspace2/**",
      "**/fixtures/**",
      "**/node_modules/**",
      "**/out-*/**/*.js",
      "**/out-editor-*/**",
      "**/out/**/*.js",
      "**/src/**/dompurify.js",
      "**/src/**/marked.js",
      "**/src/**/semver.js",
      "**/src/typings/**/*.d.ts",
      "**/src/vs/*/**/*.d.ts",
      "**/src/vs/base/test/common/filters.perf.data.js",
      "**/src/vs/loader.js",
      "**/test/unit/assert.js",
      "**/test/automation/out/**",
      "**/typings/**",
      "!.vscode",
    ],
    "jsPlugins": [
      "eslint-plugin-local",
      "eslint-plugin-header",
    ],
    "overrides": [
      {
        "files": [
          "**/*.ts",
        ],
        "jsPlugins": [
          "@stylistic/eslint-plugin",
          "eslint-plugin-local",
        ],
        "rules": {
          "@stylistic/ts/member-delimiter-style": "warn",
          "@stylistic/ts/semi": "warn",
          "local/code-no-static-self-ref": "warn",
          "local/code-no-unused-expressions": [
            "warn",
            {
              "allowTernary": true,
            },
          ],
        },
      },
      {
        "files": [
          "**/*.test.ts",
        ],
        "jsPlugins": [
          "eslint-plugin-local",
        ],
        "rules": {
          "local/code-must-use-result": [
            "warn",
            [
              {
                "functions": [
                  "assertSnapshot",
                  "assertHeap",
                ],
                "message": "Expression must be awaited",
              },
            ],
          ],
          "local/code-no-test-async-suite": "warn",
          "local/code-no-test-only": "error",
        },
      },
      {
        "files": [
          "src/vs/**/*.test.ts",
        ],
        "jsPlugins": [
          "eslint-plugin-local",
        ],
        "rules": {
          "local/code-ensure-no-disposables-leak-in-test": [
            "warn",
            {
              "exclude": [
                "src/vs/platform/configuration/test/common/configuration.test.ts",
                "src/vs/platform/opener/test/common/opener.test.ts",
                "src/vs/platform/registry/test/common/platform.test.ts",
                "src/vs/platform/workspace/test/common/workspace.test.ts",
                "src/vs/platform/workspaces/test/electron-main/workspaces.test.ts",
                "src/vs/workbench/api/test/browser/mainThreadConfiguration.test.ts",
                "src/vs/workbench/api/test/node/extHostTunnelService.test.ts",
                "src/vs/workbench/contrib/bulkEdit/test/browser/bulkCellEdits.test.ts",
                "src/vs/workbench/contrib/chat/test/common/chatWordCounter.test.ts",
                "src/vs/workbench/contrib/extensions/test/common/extensionQuery.test.ts",
                "src/vs/workbench/contrib/notebook/test/browser/notebookExecutionService.test.ts",
                "src/vs/workbench/contrib/notebook/test/browser/notebookExecutionStateService.test.ts",
                "src/vs/workbench/contrib/tasks/test/common/problemMatcher.test.ts",
                "src/vs/workbench/contrib/tasks/test/common/taskConfiguration.test.ts",
                "src/vs/workbench/services/commands/test/common/commandService.test.ts",
                "src/vs/workbench/services/userActivity/test/browser/domActivityTracker.test.ts",
                "src/vs/workbench/test/browser/quickAccess.test.ts",
              ],
            },
          ],
        },
      },
      {
        "files": [
          "**/vscode.d.ts",
          "**/vscode.proposed.*.d.ts",
        ],
        "jsPlugins": [
          "eslint-plugin-local",
        ],
        "rules": {
          "local/vscode-dts-cancellation": "warn",
          "local/vscode-dts-create-func": "warn",
          "local/vscode-dts-event-naming": [
            "warn",
            {
              "allowed": [
                "onCancellationRequested",
                "event",
              ],
              "verbs": [
                "accept",
                "change",
                "close",
                "collapse",
                "create",
                "delete",
                "discover",
                "dispose",
                "drop",
                "edit",
                "end",
                "execute",
                "expand",
                "grant",
                "hide",
                "invalidate",
                "open",
                "override",
                "perform",
                "receive",
                "register",
                "remove",
                "rename",
                "save",
                "send",
                "start",
                "terminate",
                "trigger",
                "unregister",
                "write",
              ],
            },
          ],
          "local/vscode-dts-interface-naming": "warn",
          "local/vscode-dts-literal-or-types": "warn",
          "local/vscode-dts-provider-naming": [
            "warn",
            {
              "allowed": [
                "FileSystemProvider",
                "TreeDataProvider",
                "TestProvider",
                "CustomEditorProvider",
                "CustomReadonlyEditorProvider",
                "TerminalLinkProvider",
                "AuthenticationProvider",
                "NotebookContentProvider",
              ],
            },
          ],
          "local/vscode-dts-string-type-literals": "warn",
          "local/vscode-dts-use-export": "warn",
          "local/vscode-dts-use-thenable": "warn",
          "local/vscode-dts-vscode-in-comments": "warn",
        },
      },
      {
        "files": [
          "**/vscode.d.ts",
        ],
        "plugins": [
          "jsdoc",
        ],
        "rules": {
          "jsdoc/require-returns": "warn",
        },
      },
      {
        "files": [
          "src/**/{common,browser}/**/*.ts",
        ],
        "jsPlugins": [
          "eslint-plugin-local",
        ],
        "rules": {
          "local/code-amd-node-module": "warn",
        },
      },
      {
        "files": [
          "src/*.ts",
          "src/**/{node,electron-main,electron-utility}/**/*.ts",
        ],
        "rules": {
          "no-restricted-globals": [
            "warn",
            "name",
            "length",
            "event",
            "closed",
            "external",
            "status",
            "origin",
            "orientation",
            "context",
            "__dirname",
            "__filename",
            "require",
          ],
        },
      },
      {
        "files": [
          "src/**/{browser,electron-sandbox}/**/*.ts",
        ],
        "jsPlugins": [
          "eslint-plugin-local",
        ],
        "rules": {
          "local/code-no-global-document-listener": "warn",
          "no-restricted-globals": [
            "warn",
            "name",
            "length",
            "event",
            "closed",
            "external",
            "status",
            "origin",
            "orientation",
            "context",
            {
              "message": "Use <targetWindow>.setInterval to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "setInterval",
            },
            {
              "message": "Use <targetWindow>.clearInterval to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "clearInterval",
            },
            {
              "message": "Use <targetWindow>.requestAnimationFrame to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "requestAnimationFrame",
            },
            {
              "message": "Use <targetWindow>.cancelAnimationFrame to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "cancelAnimationFrame",
            },
            {
              "message": "Use <targetWindow>.requestIdleCallback to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "requestIdleCallback",
            },
            {
              "message": "Use <targetWindow>.cancelIdleCallback to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "cancelIdleCallback",
            },
            {
              "message": "Use <targetWindow> to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "window",
            },
            {
              "message": "Use <targetWindow>.addEventListener to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "addEventListener",
            },
            {
              "message": "Use <targetWindow>.removeEventListener to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "removeEventListener",
            },
            {
              "message": "Use <targetWindow>.getComputedStyle to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "getComputedStyle",
            },
            {
              "message": "Use <targetWindow>.focus to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "focus",
            },
            {
              "message": "Use <targetWindow>.blur to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "blur",
            },
            {
              "message": "Use <targetWindow>.close to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "close",
            },
            {
              "message": "Use <targetWindow>.dispatchEvent to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "dispatchEvent",
            },
            {
              "message": "Use <targetWindow>.getSelection to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "getSelection",
            },
            {
              "message": "Use <targetWindow>.matchMedia to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "matchMedia",
            },
            {
              "message": "Use <targetWindow>.open to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "open",
            },
            {
              "message": "Use <targetWindow>.parent to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "parent",
            },
            {
              "message": "Use <targetWindow>.postMessage to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "postMessage",
            },
            {
              "message": "Use <targetWindow>.devicePixelRatio to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "devicePixelRatio",
            },
            {
              "message": "Use <targetWindow>.frames to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "frames",
            },
            {
              "message": "Use <targetWindow>.frameElement to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "frameElement",
            },
            {
              "message": "Use <targetWindow>.innerHeight to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "innerHeight",
            },
            {
              "message": "Use <targetWindow>.innerWidth to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "innerWidth",
            },
            {
              "message": "Use <targetWindow>.outerHeight to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "outerHeight",
            },
            {
              "message": "Use <targetWindow>.outerWidth to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "outerWidth",
            },
            {
              "message": "Use <targetWindow>.opener to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "opener",
            },
            {
              "message": "Use <targetWindow>.origin to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "origin",
            },
            {
              "message": "Use <targetWindow>.screen to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "screen",
            },
            {
              "message": "Use <targetWindow>.screenLeft to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "screenLeft",
            },
            {
              "message": "Use <targetWindow>.screenTop to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "screenTop",
            },
            {
              "message": "Use <targetWindow>.screenX to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "screenX",
            },
            {
              "message": "Use <targetWindow>.screenY to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "screenY",
            },
            {
              "message": "Use <targetWindow>.scrollX to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "scrollX",
            },
            {
              "message": "Use <targetWindow>.scrollY to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "scrollY",
            },
            {
              "message": "Use <targetWindow>.top to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "top",
            },
            {
              "message": "Use <targetWindow>.visualViewport to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "visualViewport",
            },
          ],
        },
      },
      {
        "files": [
          "src/**/electron-utility/**/*.ts",
        ],
        "rules": {
          "no-restricted-imports": [
            "warn",
            {
              "paths": [
                {
                  "allowImportNames": [
                    "net",
                    "system-preferences",
                  ],
                  "message": "Only net and system-preferences are allowed to be imported from electron",
                  "name": "electron",
                },
              ],
            },
          ],
        },
      },
      {
        "files": [
          "src/**/*.ts",
        ],
        "jsPlugins": [
          "eslint-plugin-local",
        ],
        "rules": {
          "local/code-import-patterns": [
            "warn",
            {
              "allow": [],
              "when": "hasBrowser",
            },
            {
              "allow": [
                "@parcel/watcher",
                "@vscode/sqlite3",
                "@vscode/vscode-languagedetection",
                "@vscode/ripgrep",
                "@vscode/iconv-lite-umd",
                "@vscode/policy-watcher",
                "@vscode/proxy-agent",
                "@vscode/spdlog",
                "@vscode/windows-process-tree",
                "assert",
                "child_process",
                "console",
                "cookie",
                "crypto",
                "dns",
                "events",
                "fs",
                "fs/promises",
                "http",
                "https",
                "minimist",
                "node:module",
                "native-keymap",
                "native-watchdog",
                "net",
                "node-pty",
                "os",
                "path",
                "perf_hooks",
                "readline",
                "stream",
                "string_decoder",
                "tas-client-umd",
                "tls",
                "undici-types",
                "url",
                "util",
                "v8-inspect-profiler",
                "vscode-regexpp",
                "vscode-textmate",
                "worker_threads",
                "@xterm/addon-clipboard",
                "@xterm/addon-image",
                "@xterm/addon-ligatures",
                "@xterm/addon-search",
                "@xterm/addon-serialize",
                "@xterm/addon-unicode11",
                "@xterm/addon-webgl",
                "@xterm/headless",
                "@xterm/xterm",
                "yauzl",
                "yazl",
                "zlib",
              ],
              "when": "hasNode",
            },
            {
              "allow": [
                "electron",
              ],
              "when": "hasElectron",
            },
            {
              "allow": [
                "assert",
                "sinon",
                "sinon-test",
              ],
              "when": "test",
            },
            {
              "restrictions": [
                "vs/base/~",
              ],
              "target": "src/vs/base/~",
            },
            {
              "restrictions": [
                "vs/base/~",
                "vs/base/parts/*/~",
              ],
              "target": "src/vs/base/parts/*/~",
            },
            {
              "restrictions": [
                "vs/base/~",
                "vs/base/parts/*/~",
                "vs/platform/*/~",
                "tas-client-umd",
                "@microsoft/1ds-core-js",
                "@microsoft/1ds-post-js",
                "@xterm/headless",
              ],
              "target": "src/vs/platform/*/~",
            },
            {
              "restrictions": [
                "vs/base/~",
                "vs/base/parts/*/~",
                "vs/platform/*/~",
                "vs/editor/~",
                "@vscode/tree-sitter-wasm",
              ],
              "target": "src/vs/editor/~",
            },
            {
              "restrictions": [
                "vs/base/~",
                "vs/base/parts/*/~",
                "vs/platform/*/~",
                "vs/editor/~",
                "vs/editor/contrib/*/~",
              ],
              "target": "src/vs/editor/contrib/*/~",
            },
            {
              "restrictions": [
                "vs/base/~",
                "vs/base/parts/*/~",
                "vs/platform/*/~",
                "vs/editor/~",
                "vs/editor/contrib/*/~",
                "vs/editor/standalone/~",
                "@vscode/tree-sitter-wasm",
              ],
              "target": "src/vs/editor/standalone/~",
            },
            {
              "layer": "browser",
              "restrictions": [
                "vs/base/~",
                "vs/base/parts/*/~",
                "vs/platform/*/~",
                "vs/editor/~",
                "vs/editor/contrib/*/~",
              ],
              "target": "src/vs/editor/editor.all.ts",
            },
            {
              "layer": "worker",
              "restrictions": [
                "vs/base/~",
                "vs/base/parts/*/~",
                "vs/platform/*/~",
                "vs/editor/~",
              ],
              "target": "src/vs/editor/editor.worker.ts",
            },
            {
              "layer": "browser",
              "restrictions": [
                "vs/base/~",
                "vs/base/parts/*/~",
                "vs/editor/~",
                "vs/editor/contrib/*/~",
                "vs/editor/standalone/~",
                "vs/editor/*",
              ],
              "target": "src/vs/editor/{editor.api.ts,editor.main.ts}",
            },
            {
              "restrictions": [
                "vs/base/~",
                "vs/base/parts/*/~",
                "vs/platform/*/~",
                "vs/editor/~",
                "vs/editor/contrib/*/~",
                "vs/workbench/~",
                "vs/workbench/services/*/~",
                "assert",
                {
                  "pattern": "vs/workbench/contrib/*/~",
                  "when": "test",
                },
              ],
              "target": "src/vs/workbench/~",
            },
            {
              "restrictions": [
                "vscode",
                "vs/base/~",
                "vs/base/parts/*/~",
                "vs/platform/*/~",
                "vs/editor/~",
                "vs/editor/contrib/*/~",
                "vs/workbench/api/~",
                "vs/workbench/~",
                "vs/workbench/services/*/~",
                "vs/workbench/contrib/*/~",
                "vs/workbench/contrib/terminalContrib/*/~",
              ],
              "target": "src/vs/workbench/api/~",
            },
            {
              "restrictions": [
                "vs/base/~",
                "vs/base/parts/*/~",
                "vs/platform/*/~",
                "vs/editor/~",
                "vs/editor/contrib/*/~",
                "vs/workbench/~",
                "vs/workbench/services/*/~",
                {
                  "pattern": "vs/workbench/contrib/*/~",
                  "when": "test",
                },
                "tas-client-umd",
                "vscode-textmate",
                "@vscode/vscode-languagedetection",
                "@vscode/tree-sitter-wasm",
                {
                  "pattern": "@xterm/xterm",
                  "when": "hasBrowser",
                },
              ],
              "target": "src/vs/workbench/services/*/~",
            },
            {
              "restrictions": [
                "vs/base/~",
                "vs/base/parts/*/~",
                "vs/platform/*/~",
                "vs/editor/~",
                "vs/editor/contrib/*/~",
                "vs/workbench/~",
                "vs/workbench/services/*/~",
                "vs/workbench/contrib/*/~",
                "vs/workbench/contrib/terminal/terminalContribChatExports*",
                "vs/workbench/contrib/terminal/terminalContribExports*",
                "vscode-notebook-renderer",
                "@vscode/tree-sitter-wasm",
                {
                  "pattern": "@xterm/xterm",
                  "when": "hasBrowser",
                },
                {
                  "pattern": "@xterm/addon-*",
                  "when": "hasBrowser",
                },
                {
                  "pattern": "vscode-textmate",
                  "when": "hasBrowser",
                },
              ],
              "target": "src/vs/workbench/contrib/*/~",
            },
            {
              "restrictions": [
                "vs/base/~",
                "vs/base/parts/*/~",
                "vs/platform/*/~",
                "vs/editor/~",
                "vs/editor/contrib/*/~",
                "vs/workbench/~",
                "vs/workbench/services/*/~",
                "vs/workbench/contrib/*/~",
                "vs/workbench/contrib/terminalContrib/*/~",
                "vscode-notebook-renderer",
                {
                  "pattern": "@xterm/xterm",
                  "when": "hasBrowser",
                },
                {
                  "pattern": "@xterm/addon-*",
                  "when": "hasBrowser",
                },
                {
                  "pattern": "vscode-textmate",
                  "when": "hasBrowser",
                },
                "@xterm/headless",
              ],
              "target": "src/vs/workbench/contrib/terminalContrib/*/~",
            },
            {
              "restrictions": [
                "vs/base/~",
                "vs/base/parts/*/~",
                "vs/platform/*/~",
                "vs/editor/~",
                "vs/editor/contrib/*/~",
                "vs/code/~",
                {
                  "pattern": "vs/workbench/workbench.web.main.js",
                  "when": "hasBrowser",
                },
                {
                  "pattern": "vs/workbench/workbench.web.main.internal.js",
                  "when": "hasBrowser",
                },
                {
                  "pattern": "vs/workbench/~",
                  "when": "hasBrowser",
                },
                {
                  "pattern": "vs/workbench/services/*/~",
                  "when": "hasBrowser",
                },
              ],
              "target": "src/vs/code/~",
            },
            {
              "restrictions": [
                "vs/base/~",
                "vs/base/parts/*/~",
                "vs/platform/*/~",
                "vs/workbench/~",
                "vs/workbench/api/~",
                "vs/workbench/services/*/~",
                "vs/workbench/contrib/*/~",
                "vs/server/~",
              ],
              "target": "src/vs/server/~",
            },
            {
              "layer": "browser",
              "restrictions": [
                "vs/workbench/contrib/**",
              ],
              "target": "src/vs/workbench/contrib/terminal/terminal.all.ts",
            },
            {
              "layer": "browser",
              "restrictions": [
                "vs/workbench/contrib/terminalContrib/*/~",
              ],
              "target": "src/vs/workbench/contrib/terminal/terminalContribChatExports.ts",
            },
            {
              "layer": "browser",
              "restrictions": [
                "vs/platform/*/~",
                "vs/workbench/contrib/terminalContrib/*/~",
              ],
              "target": "src/vs/workbench/contrib/terminal/terminalContribExports.ts",
            },
            {
              "layer": "browser",
              "restrictions": [
                "vs/base/~",
                "vs/base/parts/*/~",
                "vs/platform/*/~",
                "vs/editor/~",
                "vs/editor/contrib/*/~",
                "vs/editor/editor.all.js",
                "vs/workbench/~",
                "vs/workbench/api/~",
                "vs/workbench/services/*/~",
                "vs/workbench/contrib/*/~",
                "vs/workbench/contrib/terminal/terminal.all.js",
              ],
              "target": "src/vs/workbench/workbench.common.main.ts",
            },
            {
              "layer": "browser",
              "restrictions": [
                "vs/base/~",
                "vs/base/parts/*/~",
                "vs/platform/*/~",
                "vs/editor/~",
                "vs/editor/contrib/*/~",
                "vs/editor/editor.all.js",
                "vs/workbench/~",
                "vs/workbench/api/~",
                "vs/workbench/services/*/~",
                "vs/workbench/contrib/*/~",
                "vs/workbench/workbench.common.main.js",
              ],
              "target": "src/vs/workbench/workbench.web.main.ts",
            },
            {
              "layer": "browser",
              "restrictions": [
                "vs/base/~",
                "vs/base/parts/*/~",
                "vs/platform/*/~",
                "vs/editor/~",
                "vs/editor/contrib/*/~",
                "vs/editor/editor.all.js",
                "vs/workbench/~",
                "vs/workbench/api/~",
                "vs/workbench/services/*/~",
                "vs/workbench/contrib/*/~",
                "vs/workbench/workbench.common.main.js",
              ],
              "target": "src/vs/workbench/workbench.web.main.internal.ts",
            },
            {
              "layer": "electron-sandbox",
              "restrictions": [
                "vs/base/*/~",
                "vs/base/parts/*/~",
                "vs/platform/*/~",
                "vs/editor/~",
                "vs/editor/contrib/*/~",
                "vs/editor/editor.all.js",
                "vs/workbench/~",
                "vs/workbench/api/~",
                "vs/workbench/services/*/~",
                "vs/workbench/contrib/*/~",
                "vs/workbench/workbench.common.main.js",
              ],
              "target": "src/vs/workbench/workbench.desktop.main.ts",
            },
            {
              "restrictions": [
                "vs/base/common/*",
              ],
              "target": "src/vs/amdX.ts",
            },
            {
              "restrictions": [],
              "target": "src/vs/{loader.d.ts,monaco.d.ts,nls.ts,nls.messages.ts}",
            },
            {
              "restrictions": [],
              "target": "src/vscode-dts/**",
            },
            {
              "restrictions": [],
              "target": "src/bootstrap-window.ts",
            },
            {
              "restrictions": [
                "vs/*",
              ],
              "target": "src/vs/nls.ts",
            },
            {
              "restrictions": [
                "vs/**/common/*",
                "vs/**/node/*",
                "vs/nls.js",
                "src/*.js",
                "*",
              ],
              "target": "src/{bootstrap-cli.ts,bootstrap-esm.ts,bootstrap-fork.ts,bootstrap-import.ts,bootstrap-meta.ts,bootstrap-node.ts,bootstrap-server.ts,cli.ts,main.ts,server-cli.ts,server-main.ts}",
            },
          ],
        },
      },
      {
        "files": [
          "test/**/*.ts",
        ],
        "jsPlugins": [
          "eslint-plugin-local",
        ],
        "rules": {
          "local/code-import-patterns": [
            "warn",
            {
              "restrictions": [
                "test/automation",
                "test/smoke/**",
                "@vscode/*",
                "@parcel/*",
                "@playwright/*",
                "*",
              ],
              "target": "test/smoke/**",
            },
            {
              "restrictions": [
                "test/automation/**",
                "@vscode/*",
                "@parcel/*",
                "playwright-core/**",
                "@playwright/*",
                "*",
              ],
              "target": "test/automation/**",
            },
            {
              "restrictions": [
                "test/integration/**",
                "@vscode/*",
                "@parcel/*",
                "@playwright/*",
                "*",
              ],
              "target": "test/integration/**",
            },
            {
              "restrictions": [
                "test/monaco/**",
                "@vscode/*",
                "@parcel/*",
                "@playwright/*",
                "*",
              ],
              "target": "test/monaco/**",
            },
          ],
        },
      },
      {
        "files": [
          "src/vs/workbench/contrib/notebook/browser/view/renderers/*.ts",
        ],
        "jsPlugins": [
          "eslint-plugin-local",
        ],
        "rules": {
          "local/code-limited-top-functions": [
            "error",
            {
              "src/vs/workbench/contrib/notebook/browser/view/renderers/webviewPreloads.ts": [
                "webviewPreloads",
                "preloadsScriptStr",
              ],
            },
          ],
          "local/code-no-runtime-import": [
            "error",
            {
              "src/vs/workbench/contrib/notebook/browser/view/renderers/webviewPreloads.ts": [
                "**/*",
              ],
            },
          ],
        },
      },
    ],
    "plugins": [],
    "rules": {
      "curly": "warn",
      "eqeqeq": "warn",
      "header/header": [
        "warn",
        "block",
        [
          "---------------------------------------------------------------------------------------------",
          " *  Copyright (c) Microsoft Corporation. All rights reserved.",
          " *  Licensed under the MIT License. See License.txt in the project root for license information.",
          " *--------------------------------------------------------------------------------------------",
        ],
      ],
      "local/code-declare-service-brand": "warn",
      "local/code-layering": [
        "warn",
        {
          "browser": [
            "common",
          ],
          "common": [],
          "electron-main": [
            "common",
            "node",
            "electron-utility",
          ],
          "electron-sandbox": [
            "common",
            "browser",
          ],
          "electron-utility": [
            "common",
            "node",
          ],
          "node": [
            "common",
          ],
        },
      ],
      "local/code-must-use-super-dispose": "warn",
      "local/code-no-dangerous-type-assertions": "warn",
      "local/code-no-native-private": "warn",
      "local/code-no-nls-in-standalone-editor": "warn",
      "local/code-no-potentially-unsafe-disposables": "warn",
      "local/code-no-standalone-editor": "warn",
      "local/code-no-unexternalized-strings": "warn",
      "local/code-parameter-properties-must-have-explicit-accessibility": "warn",
      "local/code-translation-remind": "warn",
      "no-async-promise-executor": "warn",
      "no-caller": "warn",
      "no-case-declarations": "warn",
      "no-debugger": "warn",
      "no-duplicate-case": "warn",
      "no-duplicate-imports": "warn",
      "no-eval": "warn",
      "no-new-wrappers": "warn",
      "no-restricted-globals": [
        "warn",
        "name",
        "length",
        "event",
        "closed",
        "external",
        "status",
        "origin",
        "orientation",
        "context",
      ],
      "no-sparse-arrays": "warn",
      "no-throw-literal": "warn",
      "no-unsafe-finally": "warn",
      "no-unused-labels": "warn",
      "no-var": "warn",
    },
  },
  "warnings": [
    "unsupported rule, but in development: constructor-super",
    "unsupported rule: prefer-const",
    "unsupported rule: no-buffer-constructor",
    "unsupported rule: no-extra-semi",
    "unsupported rule, but in development: no-misleading-character-class",
    "unsupported rule: jsdoc/no-types",
    "unsupported rule: @typescript-eslint/naming-convention",
    "unsupported rule: no-restricted-syntax",
    "unsupported rule: jsdoc/no-multi-asterisks",
    "unsupported rule: jsdoc/require-jsdoc",
    "unsupported rule: jsdoc/check-param-names",
    "unsupported rule: comma-dangle",
    "unsupported rule: @typescript-eslint/prefer-optional-chain",
    "unsupported rule: @typescript-eslint/prefer-readonly",
  ],
}
`;

exports[`vscode merge > vscode--merge 1`] = `
{
  "config": {
    "$schema": "./node_modules/oxlint/configuration_schema.json",
    "categories": {
      "correctness": "error",
      "perf": "error",
    },
    "env": {
      "builtin": true,
    },
    "ignorePatterns": [
      "**/build/*/**/*.js",
      "**/dist/**/*.js",
      "**/extensions/**/*.d.ts",
      "**/extensions/**/build/**",
      "**/extensions/**/colorize-fixtures/**",
      "**/extensions/css-language-features/server/test/pathCompletionFixtures/**",
      "**/extensions/html-language-features/server/lib/jquery.d.ts",
      "**/extensions/html-language-features/server/src/test/pathCompletionFixtures/**",
      "**/extensions/ipynb/notebook-out/**",
      "**/extensions/markdown-language-features/media/**",
      "**/extensions/markdown-language-features/notebook-out/**",
      "**/extensions/markdown-math/notebook-out/**",
      "**/extensions/notebook-renderers/renderer-out/index.js",
      "**/extensions/simple-browser/media/index.js",
      "**/extensions/terminal-suggest/src/completions/upstream/**",
      "**/extensions/terminal-suggest/third_party/**",
      "**/extensions/typescript-language-features/test-workspace/**",
      "**/extensions/typescript-language-features/extension.webpack.config.js",
      "**/extensions/typescript-language-features/extension-browser.webpack.config.js",
      "**/extensions/typescript-language-features/package-manager/node-maintainer/**",
      "**/extensions/vscode-api-tests/testWorkspace/**",
      "**/extensions/vscode-api-tests/testWorkspace2/**",
      "**/fixtures/**",
      "**/node_modules/**",
      "**/out-*/**/*.js",
      "**/out-editor-*/**",
      "**/out/**/*.js",
      "**/src/**/dompurify.js",
      "**/src/**/marked.js",
      "**/src/**/semver.js",
      "**/src/typings/**/*.d.ts",
      "**/src/vs/*/**/*.d.ts",
      "**/src/vs/base/test/common/filters.perf.data.js",
      "**/src/vs/loader.js",
      "**/test/unit/assert.js",
      "**/test/automation/out/**",
      "**/typings/**",
      "!.vscode",
    ],
    "jsPlugins": [
      "eslint-plugin-local",
      "eslint-plugin-header",
    ],
    "overrides": [
      {
        "files": [
          "**/*.ts",
        ],
        "jsPlugins": [
          "@stylistic/eslint-plugin",
          "eslint-plugin-local",
        ],
        "rules": {
          "@stylistic/ts/member-delimiter-style": "warn",
          "@stylistic/ts/semi": "warn",
          "local/code-no-static-self-ref": "warn",
          "local/code-no-unused-expressions": [
            "warn",
            {
              "allowTernary": true,
            },
          ],
        },
      },
      {
        "files": [
          "**/*.test.ts",
        ],
        "jsPlugins": [
          "eslint-plugin-local",
        ],
        "rules": {
          "local/code-must-use-result": [
            "warn",
            [
              {
                "functions": [
                  "assertSnapshot",
                  "assertHeap",
                ],
                "message": "Expression must be awaited",
              },
            ],
          ],
          "local/code-no-test-async-suite": "warn",
          "local/code-no-test-only": "error",
        },
      },
      {
        "files": [
          "src/vs/**/*.test.ts",
        ],
        "jsPlugins": [
          "eslint-plugin-local",
        ],
        "rules": {
          "local/code-ensure-no-disposables-leak-in-test": [
            "warn",
            {
              "exclude": [
                "src/vs/platform/configuration/test/common/configuration.test.ts",
                "src/vs/platform/opener/test/common/opener.test.ts",
                "src/vs/platform/registry/test/common/platform.test.ts",
                "src/vs/platform/workspace/test/common/workspace.test.ts",
                "src/vs/platform/workspaces/test/electron-main/workspaces.test.ts",
                "src/vs/workbench/api/test/browser/mainThreadConfiguration.test.ts",
                "src/vs/workbench/api/test/node/extHostTunnelService.test.ts",
                "src/vs/workbench/contrib/bulkEdit/test/browser/bulkCellEdits.test.ts",
                "src/vs/workbench/contrib/chat/test/common/chatWordCounter.test.ts",
                "src/vs/workbench/contrib/extensions/test/common/extensionQuery.test.ts",
                "src/vs/workbench/contrib/notebook/test/browser/notebookExecutionService.test.ts",
                "src/vs/workbench/contrib/notebook/test/browser/notebookExecutionStateService.test.ts",
                "src/vs/workbench/contrib/tasks/test/common/problemMatcher.test.ts",
                "src/vs/workbench/contrib/tasks/test/common/taskConfiguration.test.ts",
                "src/vs/workbench/services/commands/test/common/commandService.test.ts",
                "src/vs/workbench/services/userActivity/test/browser/domActivityTracker.test.ts",
                "src/vs/workbench/test/browser/quickAccess.test.ts",
              ],
            },
          ],
        },
      },
      {
        "files": [
          "**/vscode.d.ts",
          "**/vscode.proposed.*.d.ts",
        ],
        "jsPlugins": [
          "eslint-plugin-local",
        ],
        "rules": {
          "local/vscode-dts-cancellation": "warn",
          "local/vscode-dts-create-func": "warn",
          "local/vscode-dts-event-naming": [
            "warn",
            {
              "allowed": [
                "onCancellationRequested",
                "event",
              ],
              "verbs": [
                "accept",
                "change",
                "close",
                "collapse",
                "create",
                "delete",
                "discover",
                "dispose",
                "drop",
                "edit",
                "end",
                "execute",
                "expand",
                "grant",
                "hide",
                "invalidate",
                "open",
                "override",
                "perform",
                "receive",
                "register",
                "remove",
                "rename",
                "save",
                "send",
                "start",
                "terminate",
                "trigger",
                "unregister",
                "write",
              ],
            },
          ],
          "local/vscode-dts-interface-naming": "warn",
          "local/vscode-dts-literal-or-types": "warn",
          "local/vscode-dts-provider-naming": [
            "warn",
            {
              "allowed": [
                "FileSystemProvider",
                "TreeDataProvider",
                "TestProvider",
                "CustomEditorProvider",
                "CustomReadonlyEditorProvider",
                "TerminalLinkProvider",
                "AuthenticationProvider",
                "NotebookContentProvider",
              ],
            },
          ],
          "local/vscode-dts-string-type-literals": "warn",
          "local/vscode-dts-use-export": "warn",
          "local/vscode-dts-use-thenable": "warn",
          "local/vscode-dts-vscode-in-comments": "warn",
        },
      },
      {
        "files": [
          "**/vscode.d.ts",
        ],
        "plugins": [
          "jsdoc",
        ],
        "rules": {
          "jsdoc/require-returns": "warn",
        },
      },
      {
        "files": [
          "src/**/{common,browser}/**/*.ts",
        ],
        "jsPlugins": [
          "eslint-plugin-local",
        ],
        "rules": {
          "local/code-amd-node-module": "warn",
        },
      },
      {
        "files": [
          "src/*.ts",
          "src/**/{node,electron-main,electron-utility}/**/*.ts",
        ],
        "rules": {
          "no-restricted-globals": [
            "warn",
            "name",
            "length",
            "event",
            "closed",
            "external",
            "status",
            "origin",
            "orientation",
            "context",
            "__dirname",
            "__filename",
            "require",
          ],
        },
      },
      {
        "files": [
          "src/**/{browser,electron-sandbox}/**/*.ts",
        ],
        "jsPlugins": [
          "eslint-plugin-local",
        ],
        "rules": {
          "local/code-no-global-document-listener": "warn",
          "no-restricted-globals": [
            "warn",
            "name",
            "length",
            "event",
            "closed",
            "external",
            "status",
            "origin",
            "orientation",
            "context",
            {
              "message": "Use <targetWindow>.setInterval to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "setInterval",
            },
            {
              "message": "Use <targetWindow>.clearInterval to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "clearInterval",
            },
            {
              "message": "Use <targetWindow>.requestAnimationFrame to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "requestAnimationFrame",
            },
            {
              "message": "Use <targetWindow>.cancelAnimationFrame to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "cancelAnimationFrame",
            },
            {
              "message": "Use <targetWindow>.requestIdleCallback to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "requestIdleCallback",
            },
            {
              "message": "Use <targetWindow>.cancelIdleCallback to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "cancelIdleCallback",
            },
            {
              "message": "Use <targetWindow> to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "window",
            },
            {
              "message": "Use <targetWindow>.addEventListener to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "addEventListener",
            },
            {
              "message": "Use <targetWindow>.removeEventListener to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "removeEventListener",
            },
            {
              "message": "Use <targetWindow>.getComputedStyle to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "getComputedStyle",
            },
            {
              "message": "Use <targetWindow>.focus to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "focus",
            },
            {
              "message": "Use <targetWindow>.blur to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "blur",
            },
            {
              "message": "Use <targetWindow>.close to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "close",
            },
            {
              "message": "Use <targetWindow>.dispatchEvent to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "dispatchEvent",
            },
            {
              "message": "Use <targetWindow>.getSelection to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "getSelection",
            },
            {
              "message": "Use <targetWindow>.matchMedia to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "matchMedia",
            },
            {
              "message": "Use <targetWindow>.open to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "open",
            },
            {
              "message": "Use <targetWindow>.parent to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "parent",
            },
            {
              "message": "Use <targetWindow>.postMessage to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "postMessage",
            },
            {
              "message": "Use <targetWindow>.devicePixelRatio to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "devicePixelRatio",
            },
            {
              "message": "Use <targetWindow>.frames to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "frames",
            },
            {
              "message": "Use <targetWindow>.frameElement to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "frameElement",
            },
            {
              "message": "Use <targetWindow>.innerHeight to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "innerHeight",
            },
            {
              "message": "Use <targetWindow>.innerWidth to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "innerWidth",
            },
            {
              "message": "Use <targetWindow>.outerHeight to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "outerHeight",
            },
            {
              "message": "Use <targetWindow>.outerWidth to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "outerWidth",
            },
            {
              "message": "Use <targetWindow>.opener to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "opener",
            },
            {
              "message": "Use <targetWindow>.origin to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "origin",
            },
            {
              "message": "Use <targetWindow>.screen to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "screen",
            },
            {
              "message": "Use <targetWindow>.screenLeft to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "screenLeft",
            },
            {
              "message": "Use <targetWindow>.screenTop to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "screenTop",
            },
            {
              "message": "Use <targetWindow>.screenX to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "screenX",
            },
            {
              "message": "Use <targetWindow>.screenY to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "screenY",
            },
            {
              "message": "Use <targetWindow>.scrollX to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "scrollX",
            },
            {
              "message": "Use <targetWindow>.scrollY to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "scrollY",
            },
            {
              "message": "Use <targetWindow>.top to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "top",
            },
            {
              "message": "Use <targetWindow>.visualViewport to support multi-window scenarios. Resolve targetWindow with DOM.getWindow(element) or DOM.getActiveWindow() or use the predefined mainWindow constant.",
              "name": "visualViewport",
            },
          ],
        },
      },
      {
        "files": [
          "src/**/electron-utility/**/*.ts",
        ],
        "rules": {
          "no-restricted-imports": [
            "warn",
            {
              "paths": [
                {
                  "allowImportNames": [
                    "net",
                    "system-preferences",
                  ],
                  "message": "Only net and system-preferences are allowed to be imported from electron",
                  "name": "electron",
                },
              ],
            },
          ],
        },
      },
      {
        "files": [
          "src/**/*.ts",
        ],
        "jsPlugins": [
          "eslint-plugin-local",
        ],
        "rules": {
          "local/code-import-patterns": [
            "warn",
            {
              "allow": [],
              "when": "hasBrowser",
            },
            {
              "allow": [
                "@parcel/watcher",
                "@vscode/sqlite3",
                "@vscode/vscode-languagedetection",
                "@vscode/ripgrep",
                "@vscode/iconv-lite-umd",
                "@vscode/policy-watcher",
                "@vscode/proxy-agent",
                "@vscode/spdlog",
                "@vscode/windows-process-tree",
                "assert",
                "child_process",
                "console",
                "cookie",
                "crypto",
                "dns",
                "events",
                "fs",
                "fs/promises",
                "http",
                "https",
                "minimist",
                "node:module",
                "native-keymap",
                "native-watchdog",
                "net",
                "node-pty",
                "os",
                "path",
                "perf_hooks",
                "readline",
                "stream",
                "string_decoder",
                "tas-client-umd",
                "tls",
                "undici-types",
                "url",
                "util",
                "v8-inspect-profiler",
                "vscode-regexpp",
                "vscode-textmate",
                "worker_threads",
                "@xterm/addon-clipboard",
                "@xterm/addon-image",
                "@xterm/addon-ligatures",
                "@xterm/addon-search",
                "@xterm/addon-serialize",
                "@xterm/addon-unicode11",
                "@xterm/addon-webgl",
                "@xterm/headless",
                "@xterm/xterm",
                "yauzl",
                "yazl",
                "zlib",
              ],
              "when": "hasNode",
            },
            {
              "allow": [
                "electron",
              ],
              "when": "hasElectron",
            },
            {
              "allow": [
                "assert",
                "sinon",
                "sinon-test",
              ],
              "when": "test",
            },
            {
              "restrictions": [
                "vs/base/~",
              ],
              "target": "src/vs/base/~",
            },
            {
              "restrictions": [
                "vs/base/~",
                "vs/base/parts/*/~",
              ],
              "target": "src/vs/base/parts/*/~",
            },
            {
              "restrictions": [
                "vs/base/~",
                "vs/base/parts/*/~",
                "vs/platform/*/~",
                "tas-client-umd",
                "@microsoft/1ds-core-js",
                "@microsoft/1ds-post-js",
                "@xterm/headless",
              ],
              "target": "src/vs/platform/*/~",
            },
            {
              "restrictions": [
                "vs/base/~",
                "vs/base/parts/*/~",
                "vs/platform/*/~",
                "vs/editor/~",
                "@vscode/tree-sitter-wasm",
              ],
              "target": "src/vs/editor/~",
            },
            {
              "restrictions": [
                "vs/base/~",
                "vs/base/parts/*/~",
                "vs/platform/*/~",
                "vs/editor/~",
                "vs/editor/contrib/*/~",
              ],
              "target": "src/vs/editor/contrib/*/~",
            },
            {
              "restrictions": [
                "vs/base/~",
                "vs/base/parts/*/~",
                "vs/platform/*/~",
                "vs/editor/~",
                "vs/editor/contrib/*/~",
                "vs/editor/standalone/~",
                "@vscode/tree-sitter-wasm",
              ],
              "target": "src/vs/editor/standalone/~",
            },
            {
              "layer": "browser",
              "restrictions": [
                "vs/base/~",
                "vs/base/parts/*/~",
                "vs/platform/*/~",
                "vs/editor/~",
                "vs/editor/contrib/*/~",
              ],
              "target": "src/vs/editor/editor.all.ts",
            },
            {
              "layer": "worker",
              "restrictions": [
                "vs/base/~",
                "vs/base/parts/*/~",
                "vs/platform/*/~",
                "vs/editor/~",
              ],
              "target": "src/vs/editor/editor.worker.ts",
            },
            {
              "layer": "browser",
              "restrictions": [
                "vs/base/~",
                "vs/base/parts/*/~",
                "vs/editor/~",
                "vs/editor/contrib/*/~",
                "vs/editor/standalone/~",
                "vs/editor/*",
              ],
              "target": "src/vs/editor/{editor.api.ts,editor.main.ts}",
            },
            {
              "restrictions": [
                "vs/base/~",
                "vs/base/parts/*/~",
                "vs/platform/*/~",
                "vs/editor/~",
                "vs/editor/contrib/*/~",
                "vs/workbench/~",
                "vs/workbench/services/*/~",
                "assert",
                {
                  "pattern": "vs/workbench/contrib/*/~",
                  "when": "test",
                },
              ],
              "target": "src/vs/workbench/~",
            },
            {
              "restrictions": [
                "vscode",
                "vs/base/~",
                "vs/base/parts/*/~",
                "vs/platform/*/~",
                "vs/editor/~",
                "vs/editor/contrib/*/~",
                "vs/workbench/api/~",
                "vs/workbench/~",
                "vs/workbench/services/*/~",
                "vs/workbench/contrib/*/~",
                "vs/workbench/contrib/terminalContrib/*/~",
              ],
              "target": "src/vs/workbench/api/~",
            },
            {
              "restrictions": [
                "vs/base/~",
                "vs/base/parts/*/~",
                "vs/platform/*/~",
                "vs/editor/~",
                "vs/editor/contrib/*/~",
                "vs/workbench/~",
                "vs/workbench/services/*/~",
                {
                  "pattern": "vs/workbench/contrib/*/~",
                  "when": "test",
                },
                "tas-client-umd",
                "vscode-textmate",
                "@vscode/vscode-languagedetection",
                "@vscode/tree-sitter-wasm",
                {
                  "pattern": "@xterm/xterm",
                  "when": "hasBrowser",
                },
              ],
              "target": "src/vs/workbench/services/*/~",
            },
            {
              "restrictions": [
                "vs/base/~",
                "vs/base/parts/*/~",
                "vs/platform/*/~",
                "vs/editor/~",
                "vs/editor/contrib/*/~",
                "vs/workbench/~",
                "vs/workbench/services/*/~",
                "vs/workbench/contrib/*/~",
                "vs/workbench/contrib/terminal/terminalContribChatExports*",
                "vs/workbench/contrib/terminal/terminalContribExports*",
                "vscode-notebook-renderer",
                "@vscode/tree-sitter-wasm",
                {
                  "pattern": "@xterm/xterm",
                  "when": "hasBrowser",
                },
                {
                  "pattern": "@xterm/addon-*",
                  "when": "hasBrowser",
                },
                {
                  "pattern": "vscode-textmate",
                  "when": "hasBrowser",
                },
              ],
              "target": "src/vs/workbench/contrib/*/~",
            },
            {
              "restrictions": [
                "vs/base/~",
                "vs/base/parts/*/~",
                "vs/platform/*/~",
                "vs/editor/~",
                "vs/editor/contrib/*/~",
                "vs/workbench/~",
                "vs/workbench/services/*/~",
                "vs/workbench/contrib/*/~",
                "vs/workbench/contrib/terminalContrib/*/~",
                "vscode-notebook-renderer",
                {
                  "pattern": "@xterm/xterm",
                  "when": "hasBrowser",
                },
                {
                  "pattern": "@xterm/addon-*",
                  "when": "hasBrowser",
                },
                {
                  "pattern": "vscode-textmate",
                  "when": "hasBrowser",
                },
                "@xterm/headless",
              ],
              "target": "src/vs/workbench/contrib/terminalContrib/*/~",
            },
            {
              "restrictions": [
                "vs/base/~",
                "vs/base/parts/*/~",
                "vs/platform/*/~",
                "vs/editor/~",
                "vs/editor/contrib/*/~",
                "vs/code/~",
                {
                  "pattern": "vs/workbench/workbench.web.main.js",
                  "when": "hasBrowser",
                },
                {
                  "pattern": "vs/workbench/workbench.web.main.internal.js",
                  "when": "hasBrowser",
                },
                {
                  "pattern": "vs/workbench/~",
                  "when": "hasBrowser",
                },
                {
                  "pattern": "vs/workbench/services/*/~",
                  "when": "hasBrowser",
                },
              ],
              "target": "src/vs/code/~",
            },
            {
              "restrictions": [
                "vs/base/~",
                "vs/base/parts/*/~",
                "vs/platform/*/~",
                "vs/workbench/~",
                "vs/workbench/api/~",
                "vs/workbench/services/*/~",
                "vs/workbench/contrib/*/~",
                "vs/server/~",
              ],
              "target": "src/vs/server/~",
            },
            {
              "layer": "browser",
              "restrictions": [
                "vs/workbench/contrib/**",
              ],
              "target": "src/vs/workbench/contrib/terminal/terminal.all.ts",
            },
            {
              "layer": "browser",
              "restrictions": [
                "vs/workbench/contrib/terminalContrib/*/~",
              ],
              "target": "src/vs/workbench/contrib/terminal/terminalContribChatExports.ts",
            },
            {
              "layer": "browser",
              "restrictions": [
                "vs/platform/*/~",
                "vs/workbench/contrib/terminalContrib/*/~",
              ],
              "target": "src/vs/workbench/contrib/terminal/terminalContribExports.ts",
            },
            {
              "layer": "browser",
              "restrictions": [
                "vs/base/~",
                "vs/base/parts/*/~",
                "vs/platform/*/~",
                "vs/editor/~",
                "vs/editor/contrib/*/~",
                "vs/editor/editor.all.js",
                "vs/workbench/~",
                "vs/workbench/api/~",
                "vs/workbench/services/*/~",
                "vs/workbench/contrib/*/~",
                "vs/workbench/contrib/terminal/terminal.all.js",
              ],
              "target": "src/vs/workbench/workbench.common.main.ts",
            },
            {
              "layer": "browser",
              "restrictions": [
                "vs/base/~",
                "vs/base/parts/*/~",
                "vs/platform/*/~",
                "vs/editor/~",
                "vs/editor/contrib/*/~",
                "vs/editor/editor.all.js",
                "vs/workbench/~",
                "vs/workbench/api/~",
                "vs/workbench/services/*/~",
                "vs/workbench/contrib/*/~",
                "vs/workbench/workbench.common.main.js",
              ],
              "target": "src/vs/workbench/workbench.web.main.ts",
            },
            {
              "layer": "browser",
              "restrictions": [
                "vs/base/~",
                "vs/base/parts/*/~",
                "vs/platform/*/~",
                "vs/editor/~",
                "vs/editor/contrib/*/~",
                "vs/editor/editor.all.js",
                "vs/workbench/~",
                "vs/workbench/api/~",
                "vs/workbench/services/*/~",
                "vs/workbench/contrib/*/~",
                "vs/workbench/workbench.common.main.js",
              ],
              "target": "src/vs/workbench/workbench.web.main.internal.ts",
            },
            {
              "layer": "electron-sandbox",
              "restrictions": [
                "vs/base/*/~",
                "vs/base/parts/*/~",
                "vs/platform/*/~",
                "vs/editor/~",
                "vs/editor/contrib/*/~",
                "vs/editor/editor.all.js",
                "vs/workbench/~",
                "vs/workbench/api/~",
                "vs/workbench/services/*/~",
                "vs/workbench/contrib/*/~",
                "vs/workbench/workbench.common.main.js",
              ],
              "target": "src/vs/workbench/workbench.desktop.main.ts",
            },
            {
              "restrictions": [
                "vs/base/common/*",
              ],
              "target": "src/vs/amdX.ts",
            },
            {
              "restrictions": [],
              "target": "src/vs/{loader.d.ts,monaco.d.ts,nls.ts,nls.messages.ts}",
            },
            {
              "restrictions": [],
              "target": "src/vscode-dts/**",
            },
            {
              "restrictions": [],
              "target": "src/bootstrap-window.ts",
            },
            {
              "restrictions": [
                "vs/*",
              ],
              "target": "src/vs/nls.ts",
            },
            {
              "restrictions": [
                "vs/**/common/*",
                "vs/**/node/*",
                "vs/nls.js",
                "src/*.js",
                "*",
              ],
              "target": "src/{bootstrap-cli.ts,bootstrap-esm.ts,bootstrap-fork.ts,bootstrap-import.ts,bootstrap-meta.ts,bootstrap-node.ts,bootstrap-server.ts,cli.ts,main.ts,server-cli.ts,server-main.ts}",
            },
          ],
        },
      },
      {
        "files": [
          "test/**/*.ts",
        ],
        "jsPlugins": [
          "eslint-plugin-local",
        ],
        "rules": {
          "local/code-import-patterns": [
            "warn",
            {
              "restrictions": [
                "test/automation",
                "test/smoke/**",
                "@vscode/*",
                "@parcel/*",
                "@playwright/*",
                "*",
              ],
              "target": "test/smoke/**",
            },
            {
              "restrictions": [
                "test/automation/**",
                "@vscode/*",
                "@parcel/*",
                "playwright-core/**",
                "@playwright/*",
                "*",
              ],
              "target": "test/automation/**",
            },
            {
              "restrictions": [
                "test/integration/**",
                "@vscode/*",
                "@parcel/*",
                "@playwright/*",
                "*",
              ],
              "target": "test/integration/**",
            },
            {
              "restrictions": [
                "test/monaco/**",
                "@vscode/*",
                "@parcel/*",
                "@playwright/*",
                "*",
              ],
              "target": "test/monaco/**",
            },
          ],
        },
      },
      {
        "files": [
          "src/vs/workbench/contrib/notebook/browser/view/renderers/*.ts",
        ],
        "jsPlugins": [
          "eslint-plugin-local",
        ],
        "rules": {
          "local/code-limited-top-functions": [
            "error",
            {
              "src/vs/workbench/contrib/notebook/browser/view/renderers/webviewPreloads.ts": [
                "webviewPreloads",
                "preloadsScriptStr",
              ],
            },
          ],
          "local/code-no-runtime-import": [
            "error",
            {
              "src/vs/workbench/contrib/notebook/browser/view/renderers/webviewPreloads.ts": [
                "**/*",
              ],
            },
          ],
        },
      },
    ],
    "plugins": [],
    "rules": {
      "curly": "warn",
      "eqeqeq": "warn",
      "header/header": [
        "warn",
        "block",
        [
          "---------------------------------------------------------------------------------------------",
          " *  Copyright (c) Microsoft Corporation. All rights reserved.",
          " *  Licensed under the MIT License. See License.txt in the project root for license information.",
          " *--------------------------------------------------------------------------------------------",
        ],
      ],
      "local/code-declare-service-brand": "warn",
      "local/code-layering": [
        "warn",
        {
          "browser": [
            "common",
          ],
          "common": [],
          "electron-main": [
            "common",
            "node",
            "electron-utility",
          ],
          "electron-sandbox": [
            "common",
            "browser",
          ],
          "electron-utility": [
            "common",
            "node",
          ],
          "node": [
            "common",
          ],
        },
      ],
      "local/code-must-use-super-dispose": "warn",
      "local/code-no-dangerous-type-assertions": "warn",
      "local/code-no-native-private": "warn",
      "local/code-no-nls-in-standalone-editor": "warn",
      "local/code-no-potentially-unsafe-disposables": "warn",
      "local/code-no-standalone-editor": "warn",
      "local/code-no-unexternalized-strings": "warn",
      "local/code-parameter-properties-must-have-explicit-accessibility": "warn",
      "local/code-translation-remind": "warn",
      "no-async-promise-executor": "warn",
      "no-caller": "warn",
      "no-case-declarations": "warn",
      "no-debugger": "warn",
      "no-duplicate-case": "warn",
      "no-duplicate-imports": "warn",
      "no-eval": "warn",
      "no-new-wrappers": "warn",
      "no-restricted-globals": [
        "warn",
        "name",
        "length",
        "event",
        "closed",
        "external",
        "status",
        "origin",
        "orientation",
        "context",
      ],
      "no-sparse-arrays": "warn",
      "no-throw-literal": "warn",
      "no-unsafe-finally": "warn",
      "no-unused-labels": "warn",
      "no-var": "warn",
    },
  },
  "warnings": [
    "unsupported rule, but in development: constructor-super",
    "unsupported rule: prefer-const",
    "unsupported rule: no-buffer-constructor",
    "unsupported rule: no-extra-semi",
    "unsupported rule, but in development: no-misleading-character-class",
    "unsupported rule: jsdoc/no-types",
    "unsupported rule: @typescript-eslint/naming-convention",
    "unsupported rule: no-restricted-syntax",
    "unsupported rule: jsdoc/no-multi-asterisks",
    "unsupported rule: jsdoc/require-jsdoc",
    "unsupported rule: jsdoc/check-param-names",
    "unsupported rule: comma-dangle",
    "unsupported rule: @typescript-eslint/prefer-optional-chain",
    "unsupported rule: @typescript-eslint/prefer-readonly",
  ],
}
`;
